# DEXOS ULTIMATE SYSTEM v4.0 - SISTEMA REVOLUCION√ÅRIO AVAN√áADO
# Integra√ß√£o Total com IA, Voz Portugu√™s, HUD Avan√ßado e Prote√ß√£o M√°xima

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
import random
import hashlib
import uuid
import socket
import cv2
import numpy as np
from PIL import Image, ImageTk, ImageDraw, ImageFont
import pyttsx3
import speech_recognition as sr
import json
import os
import math
from datetime import datetime
import pickle
import sys
import warnings
import psutil
import platform
import GPUtil
from screeninfo import get_monitors
warnings.filterwarnings('ignore')

# =============================================================================
# SISTEMA DE PROTE√á√ÉO AVAN√áADO REVOLUCION√ÅRIO
# =============================================================================

class SistemaProtecaoAvancado:
    def __init__(self):
        self.assinatura_digital = self.gerar_assinatura_avancada()
        self.mac_address = self.obter_mac_criptografado()
        self.versao = "4.0.0"
        self.licenca_valida = self.verificar_licenca_avancada()
        self.nivel_seguranca = "REVOLUCION√ÅRIO"
        self.criptografia_ativa = True
        self.integridade_verificada = self.verificar_integridade()
        
    def gerar_assinatura_avancada(self):
        """Gera assinatura digital qu√¢ntica √∫nica"""
        try:
            mac = self.obter_mac()
            hostname = socket.gethostname()
            processador = platform.processor()
            timestamp = str(int(time.time()))
            
            dados_unicos = f"DEXOS_ULTRA_{mac}_{hostname}_{processador}_{timestamp}"
            
            # Criptografia m√∫ltipla
            hash1 = hashlib.sha512(dados_unicos.encode()).hexdigest()
            hash2 = hashlib.blake2b(dados_unicos.encode()).hexdigest()
            hash_final = hashlib.sha3_256(f"{hash1}{hash2}".encode()).hexdigest()
            
            return f"DEXv4_{hash_final[:24]}"
        except:
            return f"PROTEGIDO_{random.randint(100000, 999999)}"
    
    def obter_mac_criptografado(self):
        """Obt√©m e criptografa endere√ßo MAC"""
        try:
            mac = ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) 
                           for elements in range(0,2*6,2)][::-1])
            # Criptografar MAC
            mac_hash = hashlib.md5(mac.encode()).hexdigest()[:12]
            return f"{mac_hash[:2]}:{mac_hash[2:4]}:{mac_hash[4:6]}:{mac_hash[6:8]}:{mac_hash[8:10]}:{mac_hash[10:12]}"
        except:
            return "FF:FF:FF:FF:FF:FF"
    
    def verificar_licenca_avancada(self):
        """Verifica√ß√£o de licen√ßa com criptografia"""
        try:
            if not os.path.exists('dexos_secure.license'):
                return self.criar_licenca_avancada()
            
            with open('dexos_secure.license', 'r') as f:
                dados_cripto = f.read()
            
            # Simular descriptografia
            dados = json.loads(dados_cripto)
            
            if dados.get('hash_validacao') != self.gerar_hash_validacao():
                return self.criar_licenca_avancada()
                
            return dados.get('valido', False)
                
        except:
            return self.criar_licenca_avancada()
    
    def criar_licenca_avancada(self):
        """Cria licen√ßa com criptografia avan√ßada"""
        try:
            licenca = {
                'produto': 'DEXOS ULTIMATE SYSTEM v4.0',
                'versao': self.versao,
                'assinatura': self.assinatura_digital,
                'mac_address': self.mac_address,
                'data_instalacao': datetime.now().isoformat(),
                'tipo': 'EDUCACAO_PREMIUM_PLUS',
                'valido': True,
                'expiracao': 'PERMANENTE',
                'nivel_acesso': 'REVOLUCIONARIO',
                'hash_validacao': self.gerar_hash_validacao(),
                'criptografia': 'SHA3-256+BLAKE2'
            }
            
            # Salvar com "criptografia"
            dados_cripto = json.dumps(licenca, indent=2)
            with open('dexos_secure.license', 'w') as f:
                f.write(dados_cripto)
                
            return True
        except:
            return False
    
    def gerar_hash_validacao(self):
        """Gera hash de valida√ß√£o do sistema"""
        sistema_info = f"{platform.system()}_{platform.release()}_{int(time.time())}"
        return hashlib.sha256(sistema_info.encode()).hexdigest()[:16]
    
    def verificar_integridade(self):
        """Verifica integridade do sistema"""
        try:
            # Verificar arquivos cr√≠ticos
            arquivos_criticos = ['dexos_secure.license']
            for arquivo in arquivos_criticos:
                if not os.path.exists(arquivo):
                    return False
            
            # Verificar assinatura
            return self.assinatura_digital.startswith('DEXv4_')
        except:
            return False
    
    def relatorio_seguranca(self):
        """Gera relat√≥rio completo de seguran√ßa"""
        return {
            'status': 'PROTE√á√ÉO M√ÅXIMA ATIVA' if self.licenca_valida else 'PROTE√á√ÉO COMPROMETIDA',
            'assinatura': self.assinatura_digital,
            'mac_criptografado': self.mac_address,
            'nivel_seguranca': self.nivel_seguranca,
            'integridade': 'VERIFICADA' if self.integridade_verificada else 'COMPROMETIDA',
            'criptografia': 'ATIVA' if self.criptografia_ativa else 'INATIVA',
            'ultima_verificacao': datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        }

# =============================================================================
# SISTEMA DE VOZ PORTUGU√äS BRASILEIRO AVAN√áADO
# =============================================================================

class SistemaVozPortugues:
    def __init__(self):
        self.engine = None
        self.reconhecedor = None
        self.microfone = None
        self.reconhecimento_ativo = False
        self.nivel_evolucao = 3
        self.historico_comandos = []
        self.comandos_ptbr = self.carregar_comandos_ptbr()
        self.inicializar_voz_portugues()
    
    def carregar_comandos_ptbr(self):
        """Carrega comandos em portugu√™s brasileiro"""
        return {
            'saudacoes': ['ol√°', 'oi', 'e a√≠', 'bom dia', 'boa tarde', 'boa noite'],
            'comandos_sistema': ['status', 'analisar', 'prote√ß√£o', 'c√¢mera', 'modo revolucion√°rio', 'ajuda'],
            'controles': ['ativar', 'desativar', 'mostrar', 'abrir', 'fechar'],
            'perguntas': ['como voc√™ est√°', 'o que pode fazer', 'quem √© voc√™']
        }
    
    def inicializar_voz_portugues(self):
        """Inicializa sistema de voz em portugu√™s"""
        try:
            self.engine = pyttsx3.init()
            
            # Configurar voz em portugu√™s
            voices = self.engine.getProperty('voices')
            
            # Buscar voz em portugu√™s
            voz_ptbr = None
            for voice in voices:
                if 'portugu√™s' in voice.name.lower() or 'brazil' in voice.name.lower():
                    voz_ptbr = voice.id
                    break
                elif 'microsoft' in voice.name.lower() and 'portuguese' in voice.name.lower():
                    voz_ptbr = voice.id
                    break
            
            if voz_ptbr:
                self.engine.setProperty('voice', voz_ptbr)
                print("‚úÖ Voz em portugu√™s configurada")
            else:
                print("‚ö†Ô∏è Voz em portugu√™s n√£o encontrada, usando padr√£o")
            
            # Configura√ß√µes otimizadas para portugu√™s
            self.engine.setProperty('rate', 165)  # Velocidade ideal PT-BR
            self.engine.setProperty('volume', 1.0)
            self.engine.setProperty('pitch', 110)  # Tom natural
            
            # Sistema de reconhecimento
            self.reconhecedor = sr.Recognizer()
            self.microfone = sr.Microphone()
            
            # Calibra√ß√£o avan√ßada
            with self.microfone as source:
                self.reconhecedor.adjust_for_ambient_noise(source, duration=1.5)
            
            print("‚úÖ Sistema de voz em portugu√™s inicializado")
            
        except Exception as e:
            print(f"‚ùå Erro no sistema de voz PT-BR: {e}")
    
    def falar_ptbr(self, texto, emocao="neutro", velocidade_extra=0):
        """Sistema de fala em portugu√™s com emo√ß√µes"""
        try:
            # Ajustes de emo√ß√£o em portugu√™s
            config_emocao = {
                "alegre": {"rate": 175, "pitch": 115, "prefixo": "üòä "},
                "serio": {"rate": 155, "pitch": 105, "prefixo": "üéØ "},
                "entusiasmado": {"rate": 180, "pitch": 118, "prefixo": "üöÄ "},
                "neutro": {"rate": 165 + velocidade_extra, "pitch": 110, "prefixo": "ü§ñ "}
            }
            
            config = config_emocao.get(emocao, config_emocao["neutro"])
            
            self.engine.setProperty('rate', config["rate"])
            self.engine.setProperty('pitch', config["pitch"])
            
            texto_final = f"{config['prefixo']}{texto}"
            
            print(f"üîä DEXOS: {texto}")
            
            # Registrar no hist√≥rico
            self.historico_comandos.append({
                'timestamp': datetime.now().isoformat(),
                'tipo': 'fala',
                'conteudo': texto,
                'emocao': emocao,
                'idioma': 'pt-BR'
            })
            
            def executar_fala():
                self.engine.say(texto)
                self.engine.runAndWait()
            
            threading.Thread(target=executar_fala, daemon=True).start()
            
        except Exception as e:
            print(f"‚ùå Erro na fala PT-BR: {e}")
    
    def ouvir_ptbr(self):
        """Sistema de escuta em portugu√™s"""
        if not self.reconhecimento_ativo:
            return None
        
        try:
            with self.microfone as source:
                print("üé§ DEXOS ouvindo em portugu√™s...")
                audio = self.reconhecedor.listen(source, timeout=8, phrase_time_limit=6)
            
            try:
                comando = self.reconhecedor.recognize_google(audio, language='pt-BR')
                comando = comando.lower()
                print(f"üë§ Usu√°rio: {comando}")
                
                # Registrar comando
                self.historico_comandos.append({
                    'timestamp': datetime.now().isoformat(),
                    'tipo': 'comando',
                    'conteudo': comando,
                    'idioma': 'pt-BR'
                })
                
                return comando
                
            except sr.UnknownValueError:
                self.falar_ptbr("Desculpe, n√£o consegui entender. Pode repetir por favor?", "serio")
                return None
            except sr.RequestError as e:
                self.falar_ptbr("Problema no servi√ßo de voz. Verifique sua conex√£o com a internet.", "serio")
                return None
            except sr.WaitTimeoutError:
                return None
                
        except Exception as e:
            print(f"‚ùå Erro na escuta: {e}")
            return None
    
    def processar_comando_ptbr(self, comando):
        """Processa comandos em portugu√™s"""
        comando = comando.lower()
        
        # Sauda√ß√µes
        if any(saudacao in comando for saudacao in self.comandos_ptbr['saudacoes']):
            respostas = [
                "Ol√°! Sou o DEXOS, seu assistente revolucion√°rio!",
                "Oi! Estou pronto para ajud√°-lo!",
                "E a√≠! Sistema DEXOS online e operacional!"
            ]
            self.falar_ptbr(random.choice(respostas), "alegre")
            return True
        
        # Comando Dexos
        if 'dexos' in comando:
            if 'status' in comando:
                return 'status'
            elif 'analisar' in comando or 'an√°lise' in comando:
                return 'analisar'
            elif 'prote√ß√£o' in comando or 'protecao' in comando:
                return 'protecao'
            elif 'c√¢mera' in comando or 'camera' in comando:
                return 'camera'
            elif 'revolucion√°rio' in comando or 'revolucionario' in comando:
                return 'revolucionario'
            elif 'ajuda' in comando:
                return 'ajuda'
            elif 'sair' in comando or 'fechar' in comando:
                return 'sair'
            else:
                self.falar_ptbr("Comando reconhecido! Em que posso ajud√°-lo?", "alegre")
                return 'comando_geral'
        
        # Perguntas sobre capacidades
        if any(pergunta in comando for pergunta in self.comandos_ptbr['perguntas']):
            if 'como voc√™ est√°' in comando:
                self.falar_ptbr("Estou funcionando perfeitamente! Todos os sistemas operacionais!", "alegre")
            elif 'o que pode fazer' in comando:
                self.falar_ptbr("Posso analisar sistemas, controlar c√¢meras, fornecer status em tempo real e muito mais! Diga 'Dexos, ajuda' para ver todos os comandos!", "entusiasmado")
            elif 'quem √© voc√™' in comando:
                self.falar_ptbr("Sou o DEXOS Ultimate, um sistema de intelig√™ncia artificial revolucion√°rio desenvolvido para demonstra√ß√µes avan√ßadas!", "serio")
            return True
        
        return None
    
    def iniciar_escuta_continua_ptbr(self, callback):
        """Inicia escuta cont√≠nua em portugu√™s"""
        def loop_escuta():
            self.reconhecimento_ativo = True
            while self.reconhecimento_ativo:
                comando = self.ouvir_ptbr()
                if comando:
                    acao = self.processar_comando_ptbr(comando)
                    if acao:
                        callback(acao, comando)
                time.sleep(0.3)
        
        threading.Thread(target=loop_escuta, daemon=True).start()
        self.falar_ptbr("Sistema de escuta ativado! Estou ouvindo seus comandos em portugu√™s!", "alegre")
    
    def parar_escuta_ptbr(self):
        """Para sistema de escuta"""
        self.reconhecimento_ativo = False
        self.falar_ptbr("Sistema de escuta em modo de espera.", "neutro")

# =============================================================================
# SISTEMA HUD REVOLUCION√ÅRIO AVAN√áADO
# =============================================================================

class HUDRevolucionario:
    def __init__(self, canvas, width, height):
        self.canvas = canvas
        self.width = width
        self.height = height
        self.elementos = []
        self.metricas_tempo_real = {}
        self.alertas = []
        self.inicializar_hud_avancado()
    
    def inicializar_hud_avancado(self):
        """Inicializa HUD com elementos avan√ßados"""
        # Core visual elements
        self.paleta_cores = {
            'azul_principal': '#00F0FF',
            'azul_secundario': '#0080FF',
            'verde_tecnologico': '#00FF88',
            'roxo_energetico': '#AA00FF',
            'laranja_destaque': '#FF4D00',
            'vermelho_alerta': '#FF0066',
            'branco_neon': '#FFFFFF'
        }
        
        # Sistema de part√≠culas avan√ßado
        for _ in range(120):
            self.elementos.append({
                'tipo': 'particula_avancada',
                'x': random.randint(0, self.width),
                'y': random.randint(0, self.height),
                'velocidade': random.uniform(0.8, 4.0),
                'tamanho': random.uniform(1, 5),
                'cor': random.choice(list(self.paleta_cores.values())),
                'direcao': random.uniform(0, math.pi * 2),
                'vida': random.uniform(50, 200),
                'rotacao': random.uniform(0, 360),
                'pulsacao': random.uniform(0, math.pi * 2)
            })
        
        # Linhas de rede neural
        for _ in range(35):
            self.elementos.append({
                'tipo': 'rede_neural',
                'x1': random.randint(0, self.width),
                'y1': random.randint(0, self.height),
                'x2': random.randint(0, self.width),
                'y2': random.randint(0, self.height),
                'pulso': random.uniform(0, math.pi * 2),
                'cor': self.paleta_cores['azul_principal'],
                'ativa': True
            })
        
        # N√≥s de intelig√™ncia
        for _ in range(45):
            self.elementos.append({
                'tipo': 'no_inteligencia',
                'x': random.randint(0, self.width),
                'y': random.randint(0, self.height),
                'tamanho_base': random.uniform(3, 6),
                'pulso': random.uniform(0, math.pi * 2),
                'cor': self.paleta_cores['verde_tecnologico'],
                'conectado': random.random() > 0.3
            })
        
        self.atualizar_metricas_tempo_real()
        self.animar_hud_revolucionario()
    
    def atualizar_metricas_tempo_real(self):
        """Atualiza m√©tricas do sistema em tempo real"""
        try:
            # Uso de CPU
            cpu_percent = psutil.cpu_percent(interval=0.1)
            
            # Uso de mem√≥ria
            memoria = psutil.virtual_memory()
            
            # Disco
            disco = psutil.disk_usage('/')
            
            # GPU (se dispon√≠vel)
            gpus = GPUtil.getGPUs()
            gpu_info = "N/A"
            if gpus:
                gpu_info = f"{gpus[0].load*100:.1f}%"
            
            self.metricas_tempo_real = {
                'cpu': f"{cpu_percent:.1f}%",
                'memoria': f"{memoria.percent:.1f}%",
                'disco': f"{disco.percent:.1f}%",
                'gpu': gpu_info,
                'tempo_ativa': time.time(),
                'processos': len(psutil.pids()),
                'rede': "ATIVA"
            }
            
        except Exception as e:
            self.metricas_tempo_real = {
                'cpu': "N/A",
                'memoria': "N/A", 
                'disco': "N/A",
                'gpu': "N/A",
                'tempo_ativa': time.time(),
                'processos': "N/A",
                'rede': "N/A"
            }
        
        self.canvas.after(2000, self.atualizar_metricas_tempo_real)
    
    def animar_hud_revolucionario(self):
        """Anima o HUD revolucion√°rio"""
        try:
            self.canvas.delete("hud")
            tempo = time.time()
            
            # Animar part√≠culas avan√ßadas
            for elemento in self.elementos:
                if elemento['tipo'] == 'particula_avancada':
                    # Movimento complexo com f√≠sica
                    elemento['vida'] -= 1
                    elemento['pulsacao'] += 0.1
                    elemento['rotacao'] += elemento['velocidade'] * 0.5
                    
                    elemento['x'] += math.cos(elemento['direcao']) * elemento['velocidade']
                    elemento['y'] += math.sin(elemento['direcao']) * elemento['velocidade']
                    
                    # Efeito de pulsa√ß√£o
                    tamanho = elemento['tamanho'] + math.sin(elemento['pulsacao']) * 2
                    
                    # Renascer part√≠culas
                    if (elemento['vida'] <= 0 or 
                        elemento['x'] < -100 or elemento['x'] > self.width + 100 or
                        elemento['y'] < -100 or elemento['y'] > self.height + 100):
                        self.renascer_particula(elemento)
                    
                    # Desenhar com efeito de brilho
                    self.canvas.create_oval(
                        elemento['x'] - tamanho, elemento['y'] - tamanho,
                        elemento['x'] + tamanho, elemento['y'] + tamanho,
                        fill=elemento['cor'], outline='', tags="hud",
                        width=0
                    )
                
                elif elemento['tipo'] == 'rede_neural':
                    # Linhas de rede pulsantes
                    elemento['pulso'] += 0.03
                    alpha = 0.2 + math.sin(elemento['pulso']) * 0.3
                    
                    if elemento['ativa']:
                        self.canvas.create_line(
                            elemento['x1'], elemento['y1'],
                            elemento['x2'], elemento['y2'],
                            fill=elemento['cor'], width=1.2, tags="hud",
                            dash=(4, 2) if random.random() > 0.7 else None
                        )
                
                elif elemento['tipo'] == 'no_inteligencia':
                    # N√≥s inteligentes din√¢micos
                    elemento['pulso'] += 0.05
                    tamanho = elemento['tamanho_base'] + math.sin(elemento['pulso']) * 3
                    
                    cor = elemento['cor'] if elemento['conectado'] else '#444444'
                    
                    self.canvas.create_oval(
                        elemento['x'] - tamanho, elemento['y'] - tamanho,
                        elemento['x'] + tamanho, elemento['y'] + tamanho,
                        fill=cor, outline=self.paleta_cores['branco_neon'], 
                        tags="hud", width=1
                    )
            
            # Desenhar informa√ß√µes do sistema
            self.desenhar_info_sistema(tempo)
            
            # Desenhar logo central
            self.desenhar_logo_central(tempo)
            
            self.canvas.after(25, self.animar_hud_revolucionario)
            
        except Exception as e:
            print(f"Erro na anima√ß√£o HUD: {e}")
    
    def renascer_particula(self, particula):
        """Renasce part√≠cula com novos par√¢metros"""
        particula.update({
            'x': random.randint(0, self.width),
            'y': random.randint(0, self.height),
            'velocidade': random.uniform(0.8, 4.0),
            'direcao': random.uniform(0, math.pi * 2),
            'vida': random.uniform(50, 200),
            'pulsacao': random.uniform(0, math.pi * 2)
        })
    
    def desenhar_info_sistema(self, tempo):
        """Desenha informa√ß√µes do sistema no HUD"""
        try:
            # Container de m√©tricas
            x, y = 20, 20
            largura = 250
            
            # Fundo semi-transparente
            self.canvas.create_rectangle(
                x, y, x + largura, y + 180,
                fill='#001122', outline=self.paleta_cores['azul_principal'],
                width=1, tags="hud", stipple="gray50"
            )
            
            # T√≠tulo
            self.canvas.create_text(
                x + 10, y + 15,
                text="SISTEMA DEXOS v4.0 - STATUS",
                font=("Arial", 10, "bold"),
                fill=self.paleta_cores['verde_tecnologico'],
                anchor='w', tags="hud"
            )
            
            # M√©tricas
            metricas = [
                (f"CPU: {self.metricas_tempo_real['cpu']}", self.paleta_cores['azul_principal']),
                (f"RAM: {self.metricas_tempo_real['memoria']}", self.paleta_cores['verde_tecnologico']),
                (f"GPU: {self.metricas_tempo_real['gpu']}", self.paleta_cores['roxo_energetico']),
                (f"DISCO: {self.metricas_tempo_real['disco']}", self.paleta_cores['laranja_destaque']),
                (f"PROCESSOS: {self.metricas_tempo_real['processos']}", self.paleta_cores['branco_neon']),
                (f"REDE: {self.metricas_tempo_real['rede']}", self.paleta_cores['verde_tecnologico'])
            ]
            
            for i, (texto, cor) in enumerate(metricas):
                self.canvas.create_text(
                    x + 15, y + 45 + i * 22,
                    text=texto,
                    font=("Arial", 9, "bold"),
                    fill=cor,
                    anchor='w', tags="hud"
                )
            
            # Barra de tempo
            tempo_ativo = int(time.time() - self.metricas_tempo_real['tempo_ativa'])
            self.canvas.create_text(
                x + 10, y + 165,
                text=f"Tempo Ativo: {tempo_ativo}s",
                font=("Arial", 8),
                fill=self.paleta_cores['branco_neon'],
                anchor='w', tags="hud"
            )
            
        except Exception as e:
            print(f"Erro ao desenhar info sistema: {e}")
    
    def desenhar_logo_central(self, tempo):
        """Desenha logo DEXOS central animada"""
        try:
            centro_x, centro_y = self.width // 2, self.height // 2
            
            # An√©is conc√™ntricos din√¢micos
            for i in range(1, 5):
                raio_anel = 60 + i * 15 + math.sin(tempo * 1.5 + i) * 5
                alpha = 0.3 + math.sin(tempo + i) * 0.2
                
                self.canvas.create_oval(
                    centro_x - raio_anel, centro_y - raio_anel,
                    centro_x + raio_anel, centro_y + raio_anel,
                    outline=self.paleta_cores['azul_principal'],
                    width=1.5, tags="hud"
                )
            
            # N√∫cleo principal pulsante
            raio_principal = 45 + math.sin(tempo * 3) * 8
            self.canvas.create_oval(
                centro_x - raio_principal, centro_y - raio_principal,
                centro_x + raio_principal, centro_y + raio_principal,
                outline=self.paleta_cores['verde_tecnologico'],
                width=4, tags="hud"
            )
            
            # Hex√°gono interno rotativo
            angulo_rotacao = tempo * 2
            pontos_hexagono = []
            for i in range(6):
                angulo = angulo_rotacao + math.pi/3 * i
                px = centro_x + 25 * math.cos(angulo)
                py = centro_y + 25 * math.sin(angulo)
                pontos_hexagono.extend([px, py])
            
            self.canvas.create_polygon(
                pontos_hexagono, 
                outline=self.paleta_cores['laranja_destaque'], 
                fill='', width=3, tags="hud"
            )
            
            # Texto DEXOS com efeito
            self.canvas.create_text(
                centro_x, centro_y,
                text="DEXOS",
                font=("Arial", 20, "bold"),
                fill=self.paleta_cores['azul_principal'],
                tags="hud"
            )
            
            # Subt√≠tulo
            self.canvas.create_text(
                centro_x, centro_y + 30,
                text="ULTIMATE v4.0",
                font=("Arial", 10, "bold"),
                fill=self.paleta_cores['verde_tecnologico'],
                tags="hud"
            )
            
        except Exception as e:
            print(f"Erro no logo central: {e}")

# =============================================================================
# SISTEMA DE COMUNICA√á√ÉO AVAN√áADO
# =============================================================================

class SistemaComunicacaoAvancado:
    def __init__(self, interface_principal):
        self.interface = interface_principal
        self.voz = interface_principal.voz
        self.historico_mensagens = []
        self.alertas_prioritarios = []
        self.modulo_notificacoes = NotificacoesAvancadas()
        
    def enviar_mensagem_sistema(self, mensagem, tipo="info", prioridade=1):
        """Envia mensagem do sistema com formata√ß√£o avan√ßada"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        mensagem_formatada = {
            'timestamp': timestamp,
            'conteudo': mensagem,
            'tipo': tipo,
            'prioridade': prioridade,
            'id': len(self.historico_mensagens) + 1
        }
        
        self.historico_mensagens.append(mensagem_formatada)
        
        # Formata√ß√£o visual baseada no tipo
        cores = {
            'info': '#00D4FF',
            'alerta': '#FF6B35', 
            'erro': '#FF0066',
            'sucesso': '#00FFAA',
            'sistema': '#AA00FF'
        }
        
        cor = cores.get(tipo, '#00D4FF')
        prefixo = {
            'info': '‚ÑπÔ∏è',
            'alerta': '‚ö†Ô∏è',
            'erro': '‚ùå',
            'sucesso': '‚úÖ',
            'sistema': 'üöÄ'
        }.get(tipo, '‚ÑπÔ∏è')
        
        mensagem_console = f"[{timestamp}] {prefixo} {mensagem}"
        
        # Adicionar ao console da interface
        self.interface.adicionar_console(mensagem_console, cor)
        
        # Notifica√ß√£o vocal para alta prioridade
        if prioridade >= 2:
            self.voz.falar_ptbr(mensagem, "serio" if tipo == 'alerta' else "neutro")
        
        # Alertas priorit√°rios
        if prioridade >= 3:
            self.alertas_prioritarios.append(mensagem_formatada)
            self.modulo_notificacoes.mostrar_alerta_prioritario(mensagem)
    
    def relatorio_comunicacao(self):
        """Gera relat√≥rio de comunica√ß√£o"""
        total_mensagens = len(self.historico_mensagens)
        alertas = len([m for m in self.historico_mensagens if m['prioridade'] >= 2])
        
        return {
            'total_mensagens': total_mensagens,
            'alertas_ativos': alertas,
            'ultima_mensagem': self.historico_mensagens[-1]['conteudo'] if self.historico_mensagens else 'Nenhuma',
            'sistema_comunicacao': 'ATIVO',
            'timestamp': datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        }

class NotificacoesAvancadas:
    def __init__(self):
        self.alertas_ativos = []
    
    def mostrar_alerta_prioritario(self, mensagem):
        """Mostra alerta priorit√°rio"""
        try:
            # Criar janela de alerta
            alerta_window = tk.Toplevel()
            alerta_window.title("üö® ALERTA DEXOS ULTIMATE")
            alerta_window.geometry("400x150")
            alerta_window.configure(bg='#1A1A2E')
            alerta_window.attributes('-topmost', True)
            
            # Centralizar
            alerta_window.update_idletasks()
            x = (alerta_window.winfo_screenwidth() // 2) - (400 // 2)
            y = (alerta_window.winfo_screenheight() // 2) - (150 // 2)
            alerta_window.geometry(f"400x150+{x}+{y}")
            
            # Conte√∫do do alerta
            tk.Label(
                alerta_window,
                text="üö® ALERTA DO SISTEMA",
                font=("Arial", 14, "bold"),
                fg="#FF0066",
                bg='#1A1A2E'
            ).pack(pady=10)
            
            tk.Label(
                alerta_window,
                text=mensagem,
                font=("Arial", 10),
                fg="#FFFFFF",
                bg='#1A1A2E',
                wraplength=380
            ).pack(pady=5)
            
            tk.Button(
                alerta_window,
                text="ENTENDIDO",
                command=alerta_window.destroy,
                font=("Arial", 10, "bold"),
                bg="#FF0066",
                fg="white"
            ).pack(pady=10)
            
        except Exception as e:
            print(f"Erro no alerta: {e}")

# =============================================================================
# INTERFACE PRINCIPAL SUPER AVAN√áADA
# =============================================================================

class InterfacePrincipalAvancada:
    def __init__(self, root, usuario):
        self.root = root
        self.usuario = usuario
        self.protecao = SistemaProtecaoAvancado()
        self.voz = SistemaVozPortugues()
        self.hud = None
        self.comunicacao = SistemaComunicacaoAvancado(self)
        self.camera_ativa = False
        self.cap = None
        self.modo_revolucionario = False
        
        self.criar_interface_avancada()
        self.root.after(1500, self.apresentacao_sistema_avancada)
    
    def criar_interface_avancada(self):
        """Cria interface principal super avan√ßada"""
        self.root.title(f"DEXOS ULTIMATE v4.0 - {self.usuario}")
        self.root.attributes('-fullscreen', True)
        self.root.configure(bg='#0A0A1A')
        self.root.bind('<Escape>', self.sair_tela_cheia)
        
        # Obter dimens√µes da tela
        monitor = get_monitors()[0]
        self.width = monitor.width
        self.height = monitor.height
        
        # Canvas principal para HUD
        self.canvas = tk.Canvas(
            self.root,
            width=self.width,
            height=self.height,
            bg='#0A0A1A',
            highlightthickness=0
        )
        self.canvas.pack()
        
        # Inicializar HUD revolucion√°rio
        self.hud = HUDRevolucionario(self.canvas, self.width, self.height)
        
        # Painel de controle lateral
        self.criar_painel_controle_avancado()
        
        # Console de sistema
        self.criar_console_avancado()
        
        # Iniciar sistema de voz
        self.voz.iniciar_escuta_continua_ptbr(self.processar_comando_voz)
        
        # Primeira mensagem do sistema
        self.comunicacao.enviar_mensagem_sistema(
            "Sistema DEXOS Ultimate v4.0 inicializado com sucesso!",
            "sistema", 2
        )
    
    def criar_painel_controle_avancado(self):
        """Cria painel de controle lateral avan√ßado"""
        largura_painel = 350
        
        # Frame principal do painel
        self.painel_frame = tk.Frame(
            self.root,
            bg='#001122',
            width=largura_painel,
            height=self.height
        )
        self.painel_frame.place(x=self.width - largura_painel, y=0)
        self.painel_frame.pack_propagate(False)
        
        # Cabe√ßalho do painel
        cabecalho = tk.Frame(self.painel_frame, bg='#002244', height=80)
        cabecalho.pack(fill='x', padx=10, pady=10)
        
        tk.Label(
            cabecalho,
            text="DEXOS ULTIMATE",
            font=("Arial", 16, "bold"),
            fg="#00F0FF",
            bg='#002244'
        ).pack(pady=5)
        
        tk.Label(
            cabecalho,
            text=f"Usu√°rio: {self.usuario}",
            font=("Arial", 10),
            fg="#00FF88",
            bg='#002244'
        ).pack()
        
        # √Årea de bot√µes de controle
        controles = tk.Frame(self.painel_frame, bg='#001122')
        controles.pack(fill='x', padx=15, pady=10)
        
        # Bot√µes principais com estilo avan√ßado
        botoes_principais = [
            ("üéØ STATUS DO SISTEMA", self.mostrar_status_avancado, "#00D4FF"),
            ("üîç AN√ÅLISE COMPLETA", self.executar_analise_completa, "#00FF88"),
            ("üõ°Ô∏è PROTE√á√ÉO AVAN√áADA", self.mostrar_protecao_avancada, "#FF6B35"),
            ("üì∑ C√ÇMERA INTELIGENTE", self.ativar_camera_inteligente, "#AA00FF"),
            ("üöÄ MODO REVOLUCION√ÅRIO", self.ativar_modo_revolucionario, "#FF0066"),
            ("üé§ CONTROLE POR VOZ", self.controle_voz_avancado, "#FFD700"),
            ("üìä RELAT√ìRIO COMPLETO", self.gerar_relatorio_completo, "#00FFFF"),
            ("‚ùå SAIR DO SISTEMA", self.sair_sistema, "#FF4444")
        ]
        
        for texto, comando, cor in botoes_principais:
            btn = tk.Button(
                controles,
                text=texto,
                command=comando,
                font=("Arial", 10, "bold"),
                bg=cor,
                fg="white",
                width=25,
                height=2,
                relief='flat',
                bd=0
            )
            btn.pack(pady=5)
            btn.bind("<Enter>", lambda e, b=btn: b.configure(bg='#FFFFFF'))
            btn.bind("<Leave>", lambda e, b=btn, c=cor: b.configure(bg=c))
        
        # Indicadores de status
        self.criar_indicadores_status()
    
    def criar_indicadores_status(self):
        """Cria indicadores de status em tempo real"""
        status_frame = tk.Frame(self.painel_frame, bg='#001122')
        status_frame.pack(fill='x', padx=15, pady=10)
        
        tk.Label(
            status_frame,
            text="STATUS DO SISTEMA:",
            font=("Arial", 11, "bold"),
            fg="#00FF88",
            bg='#001122'
        ).pack(anchor='w')
        
        # Indicadores
        indicadores = [
            ("üõ°Ô∏è Prote√ß√£o", "ATIVA", "#00FF88"),
            ("üé§ Voz PT-BR", "ATIVA", "#00FF88"),
            ("üìä HUD", "OPERACIONAL", "#00FF88"),
            ("üåê Rede", "EST√ÅVEL", "#00FF88")
        ]
        
        for icone, texto, cor in indicadores:
            frame_ind = tk.Frame(status_frame, bg='#001122')
            frame_ind.pack(fill='x', pady=2)
            
            tk.Label(
                frame_ind,
                text=icone,
                font=("Arial", 10),
                fg=cor,
                bg='#001122'
            ).pack(side='left')
            
            tk.Label(
                frame_ind,
                text=texto,
                font=("Arial", 9),
                fg="white",
                bg='#001122'
            ).pack(side='left', padx=5)
    
    def criar_console_avancado(self):
        """Cria console de sistema avan√ßado"""
        console_frame = tk.Frame(self.root, bg='#001122')
        console_frame.place(x=20, y=self.height - 250, width=500, height=230)
        
        tk.Label(
            console_frame,
            text="CONSOLE DO SISTEMA:",
            font=("Arial", 10, "bold"),
            fg="#00FF88",
            bg='#001122'
        ).pack(anchor='w', padx=10, pady=5)
        
        self.console_text = scrolledtext.ScrolledText(
            console_frame,
            wrap=tk.WORD,
            width=58,
            height=12,
            bg='#000000',
            fg='#00FF88',
            font=("Consolas", 8),
            insertbackground='#00FF88'
        )
        self.console_text.pack(padx=10, pady=(0,10), fill='both', expand=True)
        self.console_text.config(state=tk.DISABLED)
    
    def adicionar_console(self, mensagem, cor='#00FF88'):
        """Adiciona mensagem ao console"""
        self.console_text.config(state=tk.NORMAL)
        self.console_text.insert(tk.END, f"{mensagem}\n", cor)
        self.console_text.see(tk.END)
        self.console_text.config(state=tk.DISABLED)
    
    def apresentacao_sistema_avancada(self):
        """Apresenta√ß√£o inicial do sistema"""
        mensagens = [
            "üöÄ INICIALIZANDO DEXOS ULTIMATE v4.0...",
            "‚úÖ SISTEMA DE PROTE√á√ÉO AVAN√áADO ATIVADO",
            "üé§ SISTEMA DE VOZ PORTUGU√äS CONFIGURADO", 
            "üìä HUD REVOLUCION√ÅRIO OPERACIONAL",
            "üåê M√ìDULOS DE INTELIG√äNCIA CARREGADOS",
            f"üë§ USU√ÅRIO AUTENTICADO: {self.usuario}",
            "üéØ TODOS OS SISTEMAS OPERACIONAIS!",
            "üí° DIGA 'DEXOS, AJUDA' PARA VER COMANDOS DISPON√çVEIS"
        ]
        
        for i, msg in enumerate(mensagens):
            self.root.after(i * 800, lambda m=msg: self.comunicacao.enviar_mensagem_sistema(m, "sistema", 1))
        
        self.root.after(len(mensagens) * 800, self.voz.falar_ptbr, 
                       f"Sistema DEXOS Ultimate completamente operacional! Bem-vindo, {self.usuario}!", "entusiasmado")
    
    def processar_comando_voz(self, acao, comando):
        """Processa comandos de voz"""
        if acao == 'status':
            self.mostrar_status_avancado()
        elif acao == 'analisar':
            self.executar_analise_completa()
        elif acao == 'protecao':
            self.mostrar_protecao_avancada()
        elif acao == 'camera':
            self.ativar_camera_inteligente()
        elif acao == 'revolucionario':
            self.ativar_modo_revolucionario()
        elif acao == 'ajuda':
            self.mostrar_ajuda_voz()
        elif acao == 'sair':
            self.sair_sistema()
    
    def mostrar_status_avancado(self):
        """Mostra status avan√ßado do sistema"""
        status = self.protecao.relatorio_seguranca()
        metricas = self.hud.metricas_tempo_real
        
        mensagem = f"""
üìä STATUS DO SISTEMA DEXOS ULTIMATE:

üõ°Ô∏è SEGURAN√áA:
  ‚Ä¢ Status: {status['status']}
  ‚Ä¢ N√≠vel: {status['nivel_seguranca']}
  ‚Ä¢ Integridade: {status['integridade']}
  ‚Ä¢ Criptografia: {status['criptografia']}

‚öôÔ∏è DESEMPENHO:
  ‚Ä¢ CPU: {metricas['cpu']}
  ‚Ä¢ Mem√≥ria: {metricas['memoria']}
  ‚Ä¢ GPU: {metricas['gpu']}
  ‚Ä¢ Processos: {metricas['processos']}

üé§ COMUNICA√á√ÉO:
  ‚Ä¢ Voz PT-BR: ATIVA
  ‚Ä¢ Reconhecimento: OPERACIONAL
  ‚Ä¢ Total Mensagens: {self.comunicacao.relatorio_comunicacao()['total_mensagens']}

üí´ SISTEMA OPERACIONAL E OTIMIZADO!
        """
        
        self.comunicacao.enviar_mensagem_sistema("Status do sistema exibido", "info", 1)
        self.mostrar_janela_info("Status do Sistema", mensagem)
    
    def executar_analise_completa(self):
        """Executa an√°lise completa do sistema"""
        self.comunicacao.enviar_mensagem_sistema("Iniciando an√°lise completa do sistema...", "info", 1)
        self.voz.falar_ptbr("Executando an√°lise completa de todos os sistemas!", "serio")
        
        # Simular an√°lise
        for i in range(1, 6):
            self.root.after(i * 1000, lambda x=i: self.comunicacao.enviar_mensagem_sistema(
                f"An√°lise {x}/5: Sistemas {'√≥timos' if x % 2 == 0 else 'est√°veis'}",
                "sucesso" if x % 2 == 0 else "info", 1
            ))
        
        self.root.after(6000, lambda: self.comunicacao.enviar_mensagem_sistema(
            "‚úÖ An√°lise completa conclu√≠da! Todos os sistemas operando perfeitamente!", "sucesso", 2
        ))
        self.root.after(6000, lambda: self.voz.falar_ptbr(
            "An√°lise conclu√≠da! Todos os sistemas est√£o perfeitos!", "alegre"
        ))
    
    def mostrar_protecao_avancada(self):
        """Mostra status de prote√ß√£o avan√ßada"""
        protecao = self.protecao.relatorio_seguranca()
        
        mensagem = f"""
üõ°Ô∏è SISTEMA DE PROTE√á√ÉO AVAN√áADO DEXOS:

üîí STATUS: {protecao['status']}
üìõ ASSINATURA: {protecao['assinatura']}
üåê MAC: {protecao['mac_criptografado']}
üéØ N√çVEL: {protecao['nivel_seguranca']}
‚úÖ INTEGRIDADE: {protecao['integridade']}
üîê CRIPTOGRAFIA: {protecao['criptografia']}
üïí VERIFICA√á√ÉO: {protecao['ultima_verificacao']}

üí™ SISTEMA PROTEGIDO CONTRA AMEA√áAS
        """
        
        self.comunicacao.enviar_mensagem_sistema("Status de prote√ß√£o exibido", "info", 1)
        self.mostrar_janela_info("Prote√ß√£o Avan√ßada", mensagem)
        self.voz.falar_ptbr("Sistema de prote√ß√£o m√°ximo ativo e operacional!", "serio")
    
    def ativar_camera_inteligente(self):
        """Ativa c√¢mera inteligente"""
        if not self.camera_ativa:
            try:
                self.cap = cv2.VideoCapture(0)
                if self.cap.isOpened():
                    self.camera_ativa = True
                    self.comunicacao.enviar_mensagem_sistema("C√¢mera inteligente ativada!", "sucesso", 1)
                    self.voz.falar_ptbr("C√¢mera inteligente ativada com sucesso!", "alegre")
                    self.mostrar_camera_inteligente()
                else:
                    raise Exception("C√¢mera n√£o dispon√≠vel")
            except Exception as e:
                self.comunicacao.enviar_mensagem_sistema(f"Erro ao acessar c√¢mera: {e}", "erro", 2)
                self.voz.falar_ptbr("N√£o foi poss√≠vel acessar a c√¢mera no momento.", "serio")
        else:
            self.desativar_camera()
    
    def mostrar_camera_inteligente(self):
        """Mostra feed da c√¢mera com processamento inteligente"""
        if self.camera_ativa and self.cap.isOpened():
            ret, frame = self.cap.read()
            if ret:
                # Processamento avan√ßado da imagem
                frame = cv2.flip(frame, 1)
                
                # Adicionar HUD da c√¢mera
                cv2.putText(frame, "DEXOS CAMERA INTELIGENTE", (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
                cv2.putText(frame, "MODO: ANALISE AVANCADA", (10, 60), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)
                cv2.putText(frame, f"RESOLUCAO: {frame.shape[1]}x{frame.shape[0]}", (10, 90), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
                
                # Mostrar frame
                cv2.imshow('DEXOS - Camera Inteligente', frame)
            
            # Pr√≥ximo frame
            if cv2.getWindowProperty('DEXOS - Camera Inteligente', cv2.WND_PROP_VISIBLE) >= 1:
                self.root.after(10, self.mostrar_camera_inteligente)
            else:
                self.desativar_camera()
    
    def desativar_camera(self):
        """Desativa a c√¢mera"""
        if self.camera_ativa:
            self.camera_ativa = False
            if self.cap:
                self.cap.release()
            cv2.destroyAllWindows()
            self.comunicacao.enviar_mensagem_sistema("C√¢mera desativada", "info", 1)
    
    def ativar_modo_revolucionario(self):
        """Ativa modo revolucion√°rio"""
        self.modo_revolucionario = not self.modo_revolucionario
        
        if self.modo_revolucionario:
            self.comunicacao.enviar_mensagem_sistema(
                "üöÄ MODO REVOLUCION√ÅRIO ATIVADO! POT√äNCIA M√ÅXIMA!", 
                "sistema", 3
            )
            self.voz.falar_ptbr(
                "Modo revolucion√°rio ativado! Todos os sistemas em pot√™ncia m√°xima!", 
                "entusiasmado", 20
            )
            
            # Efeitos visuais especiais
            for _ in range(50):
                self.hud.elementos.append({
                    'tipo': 'particula_avancada',
                    'x': random.randint(0, self.width),
                    'y': random.randint(0, self.height),
                    'velocidade': random.uniform(3, 8),
                    'tamanho': random.uniform(2, 8),
                    'cor': random.choice(['#FF0066', '#AA00FF', '#00FF88']),
                    'direcao': random.uniform(0, math.pi * 2),
                    'vida': random.uniform(30, 100),
                    'rotacao': random.uniform(0, 360),
                    'pulsacao': random.uniform(0, math.pi * 2)
                })
        else:
            self.comunicacao.enviar_mensagem_sistema(
                "Modo revolucion√°rio desativado", 
                "info", 1
            )
            self.voz.falar_ptbr("Modo revolucion√°rio desativado", "neutro")
    
    def controle_voz_avancado(self):
        """Controle avan√ßado por voz"""
        comandos = """
üé§ COMANDOS DE VOZ DISPON√çVEIS:

‚Ä¢ "Dexos, status" - Status do sistema
‚Ä¢ "Dexos, analisar" - An√°lise completa  
‚Ä¢ "Dexos, prote√ß√£o" - Status de prote√ß√£o
‚Ä¢ "Dexos, c√¢mera" - Ativar c√¢mera
‚Ä¢ "Dexos, modo revolucion√°rio" - Pot√™ncia m√°xima
‚Ä¢ "Dexos, ajuda" - Mostrar esta ajuda
‚Ä¢ "Dexos, sair" - Sair do sistema

üí° O sistema est√° sempre ouvindo seus comandos!
        """
        
        self.mostrar_janela_info("Controle por Voz", comandos)
        self.voz.falar_ptbr("Aqui est√£o os comandos de voz dispon√≠veis! Diga 'Dexos, ajuda' a qualquer momento!", "alegre")
    
    def mostrar_ajuda_voz(self):
        """Mostra ajuda de comandos de voz"""
        self.controle_voz_avancado()
    
    def gerar_relatorio_completo(self):
        """Gera relat√≥rio completo do sistema"""
        protecao = self.protecao.relatorio_seguranca()
        metricas = self.hud.metricas_tempo_real
        comunicacao = self.comunicacao.relatorio_comunicacao()
        
        relatorio = f"""
üìã RELAT√ìRIO COMPLETO DEXOS ULTIMATE
üïí Gerado em: {datetime.now().strftime("%d/%m/%Y %H:%M:%S")}

üõ°Ô∏è SEGURAN√áA:
  ‚Ä¢ Status: {protecao['status']}
  ‚Ä¢ Assinatura: {protecao['assinatura']}
  ‚Ä¢ N√≠vel: {protecao['nivel_seguranca']}
  ‚Ä¢ Integridade: {protecao['integridade']}

‚öôÔ∏è DESEMPENHO:
  ‚Ä¢ CPU: {metricas['cpu']}
  ‚Ä¢ Mem√≥ria: {metricas['memoria']} 
  ‚Ä¢ GPU: {metricas['gpu']}
  ‚Ä¢ Disco: {metricas['disco']}
  ‚Ä¢ Processos: {metricas['processos']}

üé§ COMUNICA√á√ÉO:
  ‚Ä¢ Total Mensagens: {comunicacao['total_mensagens']}
  ‚Ä¢ Alertas Ativos: {comunicacao['alertas_ativos']}
  ‚Ä¢ Sistema: {comunicacao['sistema_comunicacao']}

üí´ SISTEMA: OPERACIONAL E OTIMIZADO
üë§ USU√ÅRIO: {self.usuario}
üöÄ VERS√ÉO: DEXOS ULTIMATE v4.0
        """
        
        self.mostrar_janela_info("Relat√≥rio Completo", relatorio)
        self.comunicacao.enviar_mensagem_sistema("Relat√≥rio completo gerado", "sucesso", 1)
    
    def mostrar_janela_info(self, titulo, conteudo):
        """Mostra janela de informa√ß√£o"""
        try:
            janela = tk.Toplevel(self.root)
            janela.title(titulo)
            janela.geometry("600x500")
            janela.configure(bg='#1A1A2E')
            janela.attributes('-topmost', True)
            
            # Centralizar
            janela.update_idletasks()
            x = (janela.winfo_screenwidth() // 2) - (600 // 2)
            y = (janela.winfo_screenheight() // 2) - (500 // 2)
            janela.geometry(f"600x500+{x}+{y}")
            
            # Conte√∫do
            tk.Label(
                janela,
                text=titulo,
                font=("Arial", 14, "bold"),
                fg="#00F0FF",
                bg='#1A1A2E'
            ).pack(pady=10)
            
            texto = scrolledtext.ScrolledText(
                janela,
                wrap=tk.WORD,
                width=70,
                height=25,
                bg='#000000',
                fg='#00FF88',
                font=("Consolas", 9)
            )
            texto.pack(padx=20, pady=10, fill='both', expand=True)
            texto.insert(tk.END, conteudo)
            texto.config(state=tk.DISABLED)
            
            tk.Button(
                janela,
                text="FECHAR",
                command=janela.destroy,
                font=("Arial", 10, "bold"),
                bg="#FF0066",
                fg="white"
            ).pack(pady=10)
            
        except Exception as e:
            print(f"Erro na janela info: {e}")
    
    def sair_tela_cheia(self, event=None):
        """Sai do modo tela cheia"""
        self.root.attributes('-fullscreen', False)
        self.comunicacao.enviar_mensagem_sistema("Modo tela cheia desativado", "info", 1)
    
    def sair_sistema(self):
        """Sai do sistema com seguran√ßa"""
        if messagebox.askyesno("Sair do DEXOS", "Deseja realmente sair do sistema DEXOS Ultimate?"):
            self.comunicacao.enviar_mensagem_sistema("Encerrando sistema DEXOS Ultimate...", "sistema", 2)
            self.voz.falar_ptbr("Encerrando sistema DEXOS Ultimate. At√© logo!", "serio")
            self.desativar_camera()
            self.voz.parar_escuta_ptbr()
            self.root.after(2000, self.root.destroy)

# =============================================================================
# INICIALIZA√á√ÉO DO SISTEMA
# =============================================================================

def main():
    try:
        # Verificar depend√™ncias
        print("üöÄ INICIANDO DEXOS ULTIMATE v4.0...")
        print("üì¶ VERIFICANDO DEPEND√äNCIAS...")
        
        # Criar janela principal
        root = tk.Tk()
        
        # Obter nome de usu√°rio
        usuario = "OPERADOR PRINCIPAL"  # Poderia ser obtido do sistema
        
        # Inicializar interface
        app = InterfacePrincipalAvancada(root, usuario)
        
        print("‚úÖ SISTEMA INICIALIZADO COM SUCESSO!")
        print("üéØ DEXOS ULTIMATE v4.0 PRONTO PARA OPERA√á√ÉO!")
        
        root.mainloop()
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO: {e}")
        messagebox.showerror("Erro DEXOS", f"Falha na inicializa√ß√£o: {e}")

if __name__ == "__main__":
    main()